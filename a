--real
repeat wait() until game:IsLoaded()
wait(8)
local args = {
    [1] = "Vote",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))

local args = {
    [1] = "Start",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

local replayName =  "c.txt"
local startTime = tick()
local macro = readfile(replayName)
local httpService = game:GetService("HttpService")
local recordTowers = httpService:JSONDecode(macro)  
local function stcf(s)
return loadstring("return CFrame.new(" .. s .. ");")();
end

local function stvt(s)
    return loadstring("return Vector3.new(" .. s .. ");")();
    end

local function place(info)
    repeat wait(.1)  until game.Players.LocalPlayer.GameData.Coins.Value >= tonumber(info.moneyreq) 
    local args = {
        [1] = {
            [1] = info.character,
            [2] = stcf(info.positioncframe)
        },
        [2] = stvt(info.positionvector)
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Units"):InvokeServer(unpack(args)) 
    print("fired place in place remote" .. info.moneyreq)
    Notification:Notify(
        {Title = "Macro Playback | Place", Description = "Unit placed: " .. info.character  .. "\n $ Used: " .. info.moneyreq  .. "\n $ After: " .. game.Players.LocalPlayer.GameData.Coins.Value .. "\n Macro Name: " .. replayName},
        {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
    )
end 



local function upgrade(info) -- fixed now its upgrade same unit in macro not random same unit 
    for i,v in pairs(workspace.Maingame.Unit:GetChildren()) do 
        if v:IsA("Model") and v.Name == info.character and v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.CFrame.Position  == stvt(info.cframe) then 
            if v:FindFirstChild('Stats') and v.Stats:FindFirstChild("upgradeprice") then 
                repeat wait(.1)  until game.Players.LocalPlayer.GameData.Coins.Value >= tonumber(info.upgradeprices) 
            local args = {
                [1] = "Upgrade",
                [2] =  v
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("UnitPlacements"):InvokeServer(unpack(args))
            print("fired upgrade in upgrade remote" .. info.upgradeprices)
            Notification:Notify(
    {Title = "Macro Playback | Upgrade", Description = "Unit upgraded: " .. info.character ..  "\n $ Used To Upgrade: " .. info.upgradeprices .. "\n $ Player After: " .. game.Players.LocalPlayer.GameData.Coins.Value  .. "\n Macro Name: " .. replayName},
    {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
)

        end    
    end
        end
end 

local function isUnitSold(unit)
    return not unit or not unit.Parent
end




 local function sell(info)
    for i, v in pairs(workspace.Maingame.Unit:GetChildren()) do
        if v:IsA("Model") and v.Name == info.character and v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.CFrame.Position == stvt(info.cframe) then
            local sold = false
            repeat wait(.1)
                local args = {
                    [1] = "Sell",
                    [2] = v
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("UnitPlacements"):InvokeServer(unpack(args))
                wait(.1)
                -- Check if the unit is sold
                sold = isUnitSold(v)
            until sold
            print(v.Name .. " has been sold.")
            Notification:Notify(
                {Title = "Macro Playback | Sell", Description = "Unit sold: " .. info.character .. "\n $ Player After Sold: " .. game.Players.LocalPlayer.GameData.Coins.Value .. "\n Macro Name: " .. replayName},
                {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
            )
        end
    end
 end 

local tower = 1
while task.wait() do 
    if not recordTowers[tower] then 
        break 
    end

    local currentTask = recordTowers[tower]         
    if (currentTask.time <= tick() - startTime) then 
         if currentTask.type == "CreateUnit" then 
        place(currentTask)
        print('fired place ' .. "current time: " .. currentTask.OldTime)
        
         elseif currentTask.type == "UpgradeUnit" then 
            upgrade(currentTask)
             print('fired upgrade ' .. "current time: " .. currentTask.OldTime)
         elseif currentTask.type == "SellUnit" then 
            sell(currentTask)
                 print('fired sell ' .. "current time: " .. currentTask.OldTime)
         end
        recordTowers[tower] = nil
        tower = tower + 1 
        end 
 end
