repeat wait() until game:IsLoaded()
wait(8)
print([[
    _____          _    _   _                                   
   |  __ \        | |  | \ | |                                  
   | |  | |  __ _ | |_ |  \| |  __ _  _   _  _   _   ___  _ __  
   | |  | | / _` || __|| . ` | / _` || | | || | | | / _ \| '_ \ 
   | |__| || (_| || |_ | |\  || (_| || |_| || |_| ||  __/| | | |
   |_____/  \__,_| \__||_| \_| \__, | \__,_| \__, | \___||_| |_|
                                __/ |         __/ |             
                               |___/         |___/              
]]
)
print("start macro! Made by Sukuna a.k.a DatNguyen" .. "\n ONLY REPORT ERRORS AFTER THIS LINE!")
local args = {
    [1] = "Vote",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))

local args = {
    [1] = "Start",
    [2] = "Button"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))

local AkaliNotif = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))();
local Notify = AkaliNotif.Notify;

 getgenv().FileName = ""

--[[ if workspace.Maingame.Setting.Stages.Value == "Monster City" then 
    getgenv().FileName = "c.txt"
    else
        getgenv().FileName = "d.txt"
    end ]]

local replayName =  "c.txt"
local startTime = tick()
local macro = readfile(replayName)
local httpService = game:GetService("HttpService")
local recordTowers = httpService:JSONDecode(macro)  
local function stcf(s)
return loadstring("return CFrame.new(" .. s .. ");")();
end

local function stvt(s)
    return loadstring("return Vector3.new(" .. s .. ");")();
    end

local function place(info)
    repeat wait(.1)  until game.Players.LocalPlayer.GameData.Coins.Value >= tonumber(info.moneyreq) 
    local args = {
        [1] = {
            [1] = info.character,
            [2] = stcf(info.positioncframe)
        },
        [2] = stvt(info.positionvector)
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Units"):InvokeServer(unpack(args)) 
    print("fired place in place remote: " .. info.moneyreq)
    Notify({
        Description = "Unit Placed: " .. info.character  .. "\n $ Waiting For Place: " .. info.moneyreq  .. "\n $ After: " .. game.Players.LocalPlayer.GameData.Coins.Value .. "\nMacro Name: " .. replayName ;
        Title = "Macro Playback | Place";
        Duration = 5;
        });
        
        
end 



local function upgrade(info) -- fixed now its upgrade same unit in macro not random same unit 
    for i,v in pairs(workspace.Maingame.Unit:GetChildren()) do 
        if v:IsA("Model") and v.Name == info.character and v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.CFrame.Position  == stvt(info.cframe) then 
            if v:FindFirstChild('Stats') and v.Stats:FindFirstChild("upgradeprice") then 
                repeat wait(.1)  until game.Players.LocalPlayer.GameData.Coins.Value >= tonumber(info.upgradeprices) 
            local args = {
                [1] = "Upgrade",
                [2] =  v
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("UnitPlacements"):InvokeServer(unpack(args))
            print("fired upgrade in upgrade remote: " .. info.upgradeprices)
Notify({
    Description = "Unit Upgraded: " .. info.character  .. "\n $ Waiting For Upgrade: " .. info.upgradeprices  .. "\n $ After: " .. game.Players.LocalPlayer.GameData.Coins.Value .. "\nMacro Name: " .. replayName ;
    Title = "Macro Playback | Upgrade";
    Duration = 5;
    });
    
    
        end    
    end
        end
end 

local function isUnitSold(unit)
    return not unit or not unit.Parent
end




 local function sell(info)
    for i, v in pairs(workspace.Maingame.Unit:GetChildren()) do
        if v:IsA("Model") and v.Name == info.character and v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.CFrame.Position == stvt(info.cframe) then
            local sold = false
            repeat wait(.1)
                local args = {
                    [1] = "Sell",
                    [2] = v
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("UnitPlacements"):InvokeServer(unpack(args))
                wait(.1)
                -- Check if the unit is sold
                sold = isUnitSold(v)
            until sold
            print(v.Name .. " has been sold.")
            Notify({
                Description = "Unit Sold: " .. info.character  .. "\n $ After: " .. game.Players.LocalPlayer.GameData.Coins.Value .. "\nMacro Name: " .. replayName ;
                Title = "Macro Playback | Sell";
                Duration = 5;
                });
                
                
        end
    end
 end 

local tower = 1
while true do 
     task.wait(.1)
    if not recordTowers[tower] then 
        break 
    end

    local currentTask = recordTowers[tower]         
    if (currentTask.time <= tick() - startTime) then 
         if currentTask.type == "CreateUnit" then 
        place(currentTask)
        print('fired place | ' .. "current time: " .. currentTask.time)
        
         elseif currentTask.type == "UpgradeUnit" then 
            upgrade(currentTask)
             print('fired upgrade | ' .. "current time: " .. currentTask.time)
         elseif currentTask.type == "SellUnit" then 
            sell(currentTask)
                 print('fired sell | ' .. "current time: " .. currentTask.time)
         end
        recordTowers[tower] = nil
        tower = tower + 1 
        end 
 end
