
repeat wait() until game:IsLoaded()
task.wait(1)
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
   vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
   wait(3)
   vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)




if game.PlaceId ~= 72829404259339 then return end 
getgenv().WantedNotify = {}
getgenv().WantedRangers = {}
getgenv().WantedItemsForChallenge = {}
getgenv().WantedUnitForEvo = {}
getgenv().WantedItemsForEasterEvent = {}

-- Create the button UI
local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.Name = "DraggableControlButton"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local Button = Instance.new("TextButton")
Button.Size = UDim2.new(0, 100, 0, 40)  -- Button size (100px wide, 40px high)
Button.Position = UDim2.new(0.9, 0, 0.1, 0)  -- Position it near the top-right corner with 10% from top
Button.Text = "Open/Close"
Button.BackgroundColor3 = Color3.fromRGB(60, 180, 75)
Button.TextColor3 = Color3.new(1, 1, 1)
Button.Font = Enum.Font.SourceSansBold
Button.TextSize = 18
Button.Parent = ScreenGui

-- Make it draggable
Button.Active = true
Button.Draggable = true

-- Button click action
Button.MouseButton1Click:Connect(function()
	-- Simulate pressing LeftControl
	game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
	
	-- Simulate releasing LeftControl
	game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftControl", false, game)
end)


local soundIds = {
	9043722780
   }
   
   -- Pick a random one
   local randomId = soundIds[math.random(1, #soundIds)]
   
   -- Create and play the sound
   local sound = Instance.new("Sound")
   sound.SoundId = "rbxassetid://" .. randomId
   sound.Volume = 1
   sound.Looped = false  -- Change to true if you want it to loop
   sound.Parent = workspace
   sound:Play()
   

local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()

local Window = MacLib:Window({
    Title = "L-Hub",
    Subtitle = "Free | V0.46.6",
    Size = UDim2.fromOffset(800, 650), -- 800 ,650
    DragStyle = 2,
    DisabledWindowControls = {},
    ShowUserInfo = false,
    Keybind = Enum.KeyCode.LeftControl,
    AcrylicBlur = false,
})

local globalSettings = {
	UIBlurToggle = Window:GlobalSetting({
		Name = "UI Blur",
		Default = Window:GetAcrylicBlurState(),
		Callback = function(bool)
			Window:SetAcrylicBlurState(false)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
				Lifetime = 5
			})
		end,
	}),
	NotificationToggler = Window:GlobalSetting({
		Name = "Notifications",
		Default = Window:GetNotificationsState(),
		Callback = function(bool)
			Window:SetNotificationsState(bool)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Enabled" or "Disabled") .. " Notifications",
				Lifetime = 5
			})
		end,
	}),
	ShowUserInfo = Window:GlobalSetting({
		Name = "Show User Info",
		Default = Window:GetUserInfoState(),
		Callback = function(bool)
			Window:SetUserInfoState(false)
			Window:Notify({
				Title = Window.Settings.Title,
				Description = (bool and "Showing" or "Redacted") .. " User Info",
				Lifetime = 5
			})
		end,
	})
}



Window:Dialog({
    Title = "L-Hub",
    Description = "Script still in beta, report bugs in https://discord.gg/xhUcqNUfr9 \nScript made by kazoun",
    Buttons = {
        {
            Name = "Copy Link",
            Callback = function()
            	setclipboard(tostring("https://discord.gg/xhUcqNUfr9"))
            end,
        },
    }
})


local tabGroups = {
	TabGroup1 = Window:TabGroup()
}

local tabs = {
	Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = nil }),
    Info = tabGroups.TabGroup1:Tab({ Name = "Info", Image = nil }),
	Upgrade = tabGroups.TabGroup1:Tab({ Name = "Place & Upgrade", Image = nil }),
	Evo = tabGroups.TabGroup1:Tab({ Name = "Evolve", Image = nil }),
	Misc = tabGroups.TabGroup1:Tab({ Name = "Misc", Image = nil }),
	Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = nil })
}

local sections = {
	MainSection1 = tabs.Main:Section({ Side = "Left" }),
	MainSection2 = tabs.Main:Section({ Side = "Right" }),
	MainSection3 = tabs.Main:Section({ Side = "Left" }),
	MainSection15 = tabs.Main:Section({ Side = "Right" }),

    MainSection4 = tabs.Info:Section({ Side = "Left" }),
    MainSection5 = tabs.Info:Section({ Side = "Right" }),
	MainSection6 = tabs.Info:Section({ Side = "Left" }),

	MainSection8 = tabs.Upgrade:Section({ Side = "Right" }),
	MainSection10 = tabs.Upgrade:Section({ Side = "Right" }),
	MainSection14 = tabs.Upgrade:Section({ Side = "Left" }),

	MainSection19 = tabs.Evo:Section({ Side = "Left" }),
	MainSection20 = tabs.Evo:Section({ Side = "Right" }),
	MainSection22 = tabs.Evo:Section({ Side = "Right" }),
	MainSection24 = tabs.Evo:Section({ Side = "Left" }),

	MainSection11 = tabs.Misc:Section({ Side = "Left" }),
	MainSection16 = tabs.Misc:Section({ Side = "Left" }),
	MainSection18 = tabs.Misc:Section({ Side = "Right" }),
	MainSection17 = tabs.Misc:Section({ Side = "Right" }),
	MainSection7 = tabs.Misc:Section({ Side = "Right" }),

	MainSection12 = tabs.Settings:Section({ Side = "Right" }),
	MainSection13 = tabs.Settings:Section({ Side = "Right" }),
}

sections.MainSection1:Header({
	Name = "AutoJoin-Type World"
})

local WorldSelectForAutoComplete = sections.MainSection1:Dropdown({
	Name = "Select Type To Auto Join:",
	Multi = false,
	Required = true,
	Options = {"Story","Ranger","Raid","Challenge","Infinity Castle","Boss-Event","Easter-Event","AFK Chamber"},
	Default = "",
	Callback = function(Value)
		getgenv().TypePortal = Value 
	end,
}, "PortalSelect")




sections.MainSection2:Header({
	Name = "Story Configs:"
})



local Dropdown = sections.MainSection2:Dropdown({
	Name = "World:",
	Multi = false,
	Required = true,
	Options = {"OnePiece", "Namek", "DemonSlayer", "Naruto","OPM"},
	Default = "",
	Callback = function(Value)
		getgenv().WorldSelect = Value 
	end,
}, "SelectWorldStory")

local Dropdown = sections.MainSection2:Dropdown({
	Name = "Act:",
	Multi = false,
	Required = true,
	Options = {"1","2","3","4","5","6","7","8","9","10"},
	Default = "",
	Callback = function(Value)
	getgenv().ActSelect =Value 
	end,
}, "SelectActStory")

local Dropdown = sections.MainSection2:Dropdown({
	Name = "Difficulty:",
	Multi = false,
	Required = true,
	Options = {"Normal","Hard","Nightmare"},
	Default = "",
	Callback = function(Value)
	getgenv().DifficultySelect =Value 
	end,
}, "SelectDifficultySelect")

sections.MainSection2:Header({
	Name = "Ranger Configs:"
})

local Dropdown = sections.MainSection2:Dropdown({
	Name = "World:",
	Multi = false,
	Required = true,
	Options = {"OnePiece", "Namek", "DemonSlayer", "Naruto","OPM"},
	Default = "",
	Callback = function(Value)
		getgenv().WorldSelectRanger = Value 
	end,
}, "SelectWorldStoryRanger")

local Dropdown = sections.MainSection2:Dropdown({
	Name = "Act:",
	Multi = false,
	Required = true,
	Options = {"1","2","3"},
	Default = "",
	Callback = function(Value)
	getgenv().ActSelectRanger =Value 
	end,
}, "SelectActRanger")

local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
local replicatedStorage = game:GetService("ReplicatedStorage")
local playRoomEvent = replicatedStorage:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event")


local join = sections.MainSection1:Toggle({
	Name = "Create Config Type World",
	Default = false,
	Callback = function(value)
		getgenv().CreatePortal = value 

		if not value then return end

		if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") then return end


			while getgenv().CreatePortal do

				if getgenv().TypePortal == "Story" then
				
if not playerGui.PlayRoom.Main.GameStage.Visible then
local args = {
[1] = "Create"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))

task.wait(.5)
local args = {
[1] = "Change-World",
[2] = {
["World"] = getgenv().WorldSelect
}
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
task.wait(.5)
local args = {
[1] = "Change-Chapter",
[2] = {
["Chapter"] = getgenv().WorldSelect .. "_Chapter" .. tostring(getgenv().ActSelect)
}
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
task.wait(.5)
local args = {
[1] = "Change-Difficulty",
[2] = {
["Difficulty"] = getgenv().DifficultySelect
}
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
task.wait(.5)
local args = {
[1] = "Submit"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
task.wait(.5)
playRoomEvent:FireServer("Start")
end 


				elseif getgenv().TypePortal == "Ranger" then
					if not playerGui.PlayRoom.Main.GameStage.Visible then
						playRoomEvent:FireServer("Create")
						task.wait(0.5)

						playRoomEvent:FireServer("Change-Mode", { Mode = "Ranger Stage" })
						task.wait(0.5)

						local args = {
							[1] = "Change-World",
							[2] = {
								["World"] = getgenv().WorldSelectRanger
							}
						}
						
						game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))

						task.wait(.5)
						playRoomEvent:FireServer("Change-Chapter", {
							Chapter = getgenv().WorldSelectRanger .. "_RangerStage" .. getgenv().ActSelectRanger
						})
						task.wait(0.5)

						playRoomEvent:FireServer("Submit")
						task.wait(0.5)

						playRoomEvent:FireServer("Start")
					end
				elseif getgenv().TypePortal == "Raid" then
                    return
					Window:Notify({
                        Title = "L-Hub",
                        Description = "Still on progress...",
                        Lifetime = 5
                    })
                elseif getgenv().TypePortal == "Infinity Castle" then
                    return
					Window:Notify({
                        Title = "L-Hub",
                        Description = "Still on progress...",
                        Lifetime = 5
                    })
				elseif getgenv().TypePortal == "AFK Chamber" then
					if game:GetService("Players").LocalPlayer.PlayerGui.AFKChamber.Enabled == false then 
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Lobby"):WaitForChild("AFKWorldTeleport"):FireServer()
					end 
				elseif getgenv().TypePortal == "Boss-Event" then
					local args = {
						[1] = "Boss-Event"
					}
					
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
                elseif getgenv().TypePortal == "Challenge" then
					
					playRoomEvent:FireServer("Create")
					task.wait(0.5)
					local args = {
						[1] = "Create",
						[2] = {
							["CreateChallengeRoom"] = true
						}
					}
					
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
					task.wait(0.5)

					playRoomEvent:FireServer("Start")
				elseif getgenv().TypePortal == "Easter-Event" then
					playRoomEvent:FireServer("Create")
					task.wait(0.5)
					local args = {
						[1] = "Easter-Event"
					}
					
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer(unpack(args))
					task.wait(0.5)
					playRoomEvent:FireServer("Start")
				end

				task.wait(1)
			end
		
	end,
}, "CreatePortal")





sections.MainSection3:Header({
	Name = "In-Match Configs:"
})

sections.MainSection3:Toggle({
	Name = "Auto Vote Start",
	Default = false,
	Callback = function(value)
		getgenv().AutoVoteStart = value
        while task.wait(.5) do 
			 if AutoVoteStart == true then 
		 
				if game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.VotePlaying.Visible == true then 

                    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VotePlaying"):FireServer()

					
				end 

			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoVoteStartToggle")

sections.MainSection3:Toggle({
	Name = "Auto Play",
	Default = false,
	Callback = function(value)
		getgenv().AutoSelectCard = value
        while task.wait(.5) do 
			 if AutoSelectCard == true then 
		 
				if game:GetService("ReplicatedStorage").Player_Data[game.Players.LocalPlayer.Name].Data.AutoPlay.Value == false then 

                    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Units"):WaitForChild("AutoPlay"):FireServer()

				end 

			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoPlayToggle")

sections.MainSection3:Toggle({
	Name = "Auto UP Maximum Yen [In-Match]",
	Default = false,
	Callback = function(value)

		if value then 
			Window:Dialog({
				Title = "L-hub notify",
				Description = "this upgrade is for in-match not in lobby. Which mean u need max Yen to upgrade it.",
				Buttons = {
					{
						Name = "Bet daddy kazoun~",
						Callback = function()
							print("Confirmed!")
						end,
					},
				}
			})
		end 
		getgenv().AutoUpgradeYen = value
        while task.wait(.5) do 
			 if AutoUpgradeYen == true then 
		 
				local args = {
					[1] = "MaximumYen"
				}
				
				game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Gameplay"):WaitForChild("StatsManager"):FireServer(unpack(args))
				

			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoUpgradeYenToggle")

sections.MainSection3:Toggle({
	Name = "Auto Remove Enemies [Visual]",
	Default = false,
	Callback = function(value)

		getgenv().RemoveEnemies = value

		-- Using a loop without excessive waiting
		while RemoveEnemies do
			-- Loop through all enemies in the EnemyT folder
			for _, enemy in pairs(workspace.Agent.EnemyT:GetChildren()) do
				if enemy:IsA("Part") then
					enemy:Destroy()
				end
			end
			-- Avoid unnecessary waits by breaking out when RemoveEnemies is false
			if not RemoveEnemies then
				break
			end
			task.wait(1) -- Wait 1 second before checking again
		end
		
	end,
}, "AutoRemoveEnemiesToggle")

sections.MainSection3:Input({
	Name = "Enter Distance To Auto Ult:",
	Placeholder = "Input",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set distance for auto ult to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().NumberUlt = input
	end,
}, "DistanceUlt")

sections.MainSection3:Toggle({
	Name = "Auto Ultimate If Enemies Near",
	Default = false,
	Callback = function(value)

		if value then 
			Window:Dialog({
				Title = "L-hub notify",
				Description = "if you turn on auto-remove enemies then this feature wont working.",
				Buttons = {
					{
						Name = "Bet daddy kazoun~",
						Callback = function()
							print("Confirmed!")
						end,
					},
				}
			})
		end 
		

		getgenv().AutoUlt = value
        while task.wait(.5) do 
			 if AutoUlt == true then 
		 
				for _, unit in pairs(workspace.Agent.UnitT:GetChildren()) do
					if unit:IsA('Part') and unit:FindFirstChild("Info") and unit.Info.ActiveAbility.Value ~= "" then
						local closestEnemy = nil
						local shortestDistance = tonumber(getgenv().NumberUlt)
				
						for _, enemy in pairs(workspace.Agent.EnemyT:GetChildren()) do
							if enemy:IsA("Part") then
								local distance = (unit.Position - enemy.Position).Magnitude
								if distance < shortestDistance then
									shortestDistance = distance
									closestEnemy = enemy
								end
							end
						end
				
						if closestEnemy then
							--print("Unit:", unit.Name, "Closest Enemy:", closestEnemy.Name, "Distance:", shortestDistance)
					   local args = {
					[1] = workspace.Agent.UnitT[unit.Name]
				}
				
				game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Units"):WaitForChild("Ultimate"):FireServer(unpack(args))
				
						else
							--print("Unit:", unit.Name, "has no enemies in EnemyT.")
						end
					end
				end
				

			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoUltToggle")

local methodaction = sections.MainSection3:Dropdown({
	Name = "Select Action After: ",
	Multi = false,
	Required = true,
	Options = {"Retry","Next Stage","Return To Lobby"},
	Default = "None",
	Callback = function(Value)
		getgenv().Method = Value 
	end,
}, "Method")



sections.MainSection4:Header({
	Name = "Player Info:"
})

local player = game.Players.LocalPlayer
local dataFolder = game:GetService("ReplicatedStorage").Player_Data[player.Name].Data

local labels = {"Gem", "Gold", "Exp", "CurseToken", "MaxCollection", "Title"}
local labelObjects = {}
local previousValues = {}

-- Create labels and connect updates
for _, valueName in pairs(labels) do
	local valueObj = dataFolder:FindFirstChild(valueName)
	if valueObj and valueObj:IsA("ValueBase") then
		-- Store the initial value
		previousValues[valueName] = valueObj.Value

		-- Create the label with the initial value
		local label = sections.MainSection4:Label({
			Text = valueName .. ": " .. tostring(valueObj.Value)
		})

		labelObjects[valueName] = label

		-- Listen for changes on Value
		valueObj:GetPropertyChangedSignal("Value"):Connect(function()
			local newValue = valueObj.Value
			local previous = previousValues[valueName]
		
			local newText = valueName .. ": " .. tostring(newValue)
		
			-- Only show difference for number values
			if typeof(newValue) == "number" and typeof(previous) == "number" then
				local difference = newValue - previous
				if difference ~= 0 then
					newText = newText .. " (+" .. tostring(difference) .. " last match)"
				end
			elseif typeof(newValue) == "string" and newValue ~= previous then
				newText = newText .. " (changed from: " .. tostring(previous) .. ")"
			end
		
			label:UpdateName(newText)
			previousValues[valueName] = newValue
		end)
		
	end
end


sections.MainSection5:Header({
	Name = "Player Inventory Info:"
})

local player = game.Players.LocalPlayer
local dataFolder = game:GetService("ReplicatedStorage").Player_Data[player.Name].Items

local labels = {}
local previousAmounts = {}

-- Create initial labels for each value in Data
for _, valueObj in pairs(dataFolder:GetChildren()) do
    if valueObj:IsA("Folder") and valueObj:FindFirstChild("Amount") then
        -- Store the initial value
        previousAmounts[valueObj.Name] = valueObj.Amount.Value

        -- Create the label with the initial value
        local label = sections.MainSection5:Label({
            Text = valueObj.Name .. ": " .. tostring(valueObj.Amount.Value)
        })

        -- Store the label to update later
        labels[valueObj.Name] = label

        -- Listen for changes on Amount.Value
        valueObj.Amount:GetPropertyChangedSignal("Value"):Connect(function()
            local newAmount = valueObj.Amount.Value
            local difference = newAmount - previousAmounts[valueObj.Name]

            -- Update the label text with the difference
            local newText = valueObj.Name .. ": " .. tostring(newAmount)
            if difference ~= 0 then
                newText = newText .. " (+ " .. tostring(difference) .. " last match)"
            end

            labels[valueObj.Name]:UpdateName(newText)

            -- Update the previous value for the next comparison
            previousAmounts[valueObj.Name] = newAmount
        end)
    end
end

sections.MainSection6:Header({
	Name = "Player Stats Info:"
})

local player = game.Players.LocalPlayer
local dataFolder = game:GetService("ReplicatedStorage").Player_Data[player.Name].Stats

local labels = {}
local previousAmounts = {}

-- Create initial labels for each value in Data
for _, valueObj in pairs(dataFolder:GetChildren()) do
    if valueObj:IsA("NumberValue")  then
        -- Store the initial value
        previousAmounts[valueObj.Name] = valueObj.Value

        -- Create the label with the initial value
        local label = sections.MainSection6:Label({
            Text = valueObj.Name .. ": " .. tostring(valueObj.Value)
        })

        -- Store the label to update later
        labels[valueObj.Name] = label

        -- Listen for changes on Amount.Value
        valueObj:GetPropertyChangedSignal("Value"):Connect(function()
            local newAmount = valueObj.Value
            local difference = newAmount - previousAmounts[valueObj.Name]

            -- Update the label text with the difference
            local newText = valueObj.Name .. ": " .. tostring(newAmount)
            if difference ~= 0 then
                newText = newText .. " (+ " .. tostring(difference) .. " last match)"
            end

            labels[valueObj.Name]:UpdateName(newText)

            -- Update the previous value for the next comparison
            previousAmounts[valueObj.Name] = newAmount
        end)
    end
end

sections.MainSection15:Header({
	Name = "Units Dropped In Match:"
})


sections.MainSection15:Toggle({
	Name = "Update If Dropped Units",
	Default = false,
	Callback = function(value)
		getgenv().AutoUpdateUnitDrop = value 
		 while task.wait(.5) do 
			 if getgenv().AutoUpdateUnitDrop  == true then 

				if game:GetService("Players").LocalPlayer:FindFirstChild("RewardsShow") then
				local labels = {}
 local unitsinfo= game:GetService("Players").LocalPlayer.RewardsShow
local function updateTextLabel(valueObj)
    local label = sections.MainSection15:Label({
        Text = valueObj.Name
    })
    labels[valueObj.Name] = label
end

unitsinfo.ChildAdded:Connect(function(valueObj)
    if valueObj:IsA("Folder") and (valueObj.Name =="Yuta" or valueObj.Name == "Ace" or valueObj.Name == "Gogeta" or valueObj.Name == "Madara") then
        updateTextLabel(valueObj)
    end
end)
break
end
			 else
				wait()
				break 
			 end 
			end 

	end,
}, "AutoUpdateUnitsToggle")

sections.MainSection15:Label({
	Text = "Unit dropped will update under here after u toggled."
})


sections.MainSection17:Divider()

sections.MainSection17:Header({
	Name = "Current Challenge Info:"
})


local challengeData = game:GetService("ReplicatedStorage").Gameplay.Game.Challenge:GetChildren()
local itemsFolder = game:GetService("ReplicatedStorage").Gameplay.Game.Challenge:FindFirstChild("Items")
local player = game.Players.LocalPlayer

local labels = {}
local previousAmounts = {}

-- Display all challenge string values
for _, valueObj in pairs(challengeData) do
    if valueObj:IsA("ValueBase") then 
        previousAmounts[valueObj.Name] = valueObj.Value

        local label = sections.MainSection17:Label({
            Text = valueObj.Name .. ": " .. tostring(valueObj.Value)
        })

        labels[valueObj.Name] = label

        valueObj:GetPropertyChangedSignal("Value"):Connect(function()
            local newAmount = valueObj.Value
            local previous = previousAmounts[valueObj.Name]

            local newText = valueObj.Name .. ": " .. tostring(newAmount)
            if newAmount ~= previous then
                newText = newText .. " (changed from: " .. tostring(previous) .. ")"
            end

            labels[valueObj.Name]:UpdateName(newText)
            previousAmounts[valueObj.Name] = newAmount
        end)
    end
end



sections.MainSection7:Divider()
sections.MainSection7:Header({ Name = "Current Items Drop:" })

local itemsFolder = game:GetService("ReplicatedStorage").Gameplay.Game.Challenge:FindFirstChild("Items")
local player = game.Players.LocalPlayer

local labels = {}
local previousNames = {}

if itemsFolder then
    for _, valueObj in pairs(itemsFolder:GetChildren()) do
        if valueObj:IsA("ValueBase") then 
            previousNames[valueObj] = valueObj.Name

            local label = sections.MainSection7:Label({
                Text = valueObj.Name
            })

            labels[valueObj] = label

            -- Update when the .Value changes (optional, but included)
            valueObj:GetPropertyChangedSignal("Value"):Connect(function()
                local newText = valueObj.Name
                labels[valueObj]:UpdateName(newText)
            end)

            -- Update when the .Name changes
            valueObj:GetPropertyChangedSignal("Name"):Connect(function()
                local newName = valueObj.Name
                local oldName = previousNames[valueObj]

                local label = labels[valueObj]
                if label then
                    label:UpdateName(newName .. " (changed from: " .. oldName .. ")")
                end

                previousNames[valueObj] = newName
            end)
        end
    end
end

local items = {}
for i, v in pairs(game:GetService("ReplicatedStorage").Assets.ItemModels.Models:GetDescendants()) do
    if v:IsA("Folder") and v.Name ~= "Gears" and v.Name ~= "[for-showing]" then
        for _, model in pairs(v:GetChildren()) do
            if model:IsA("Model") then
              table.insert(items, model.Name)
            end
        end
    end
end


sections.MainSection18:Header({
	Name = "Auto-Join Specific Rewards Challenges:"
})

local AutoCompleteForChooseRewards = sections.MainSection18:Dropdown({
	Name = "Auto Join X If No Rewards:",
	Multi = false,
	Required = true,
	Options = {"Story","Boss-Event","Easter-Event","AFK Chamber"},
	Default = "",
	Callback = function(Value)
		getgenv().WaitChallenge = Value 
	end,
}, "AutoCompleteForChooseRewardsSelect")

local multiitemchallenge = sections.MainSection18:Dropdown({
	Name = "Select Multi Rewards:",
	Search = true,
	Multi = true,
	Required = false,
	Options = items,
	Default = {"None"},
	Callback = function(Value)
		getgenv().WantedItemsForChallenge = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedItemsForChallenge, i)  -- Insert the key (i) into the table
		end
		print("Wanted Multi Items Challenge changed:", table.concat(getgenv().WantedItemsForChallenge, ","))
		
	end,
}, "multiitemchallengeDP")

local ActionSpecificDPChallenge = sections.MainSection18:Dropdown({
	Name = "Select Action After: ",
	Multi = false,
	Required = true,
	Options = {"Retry","Next Stage","Return To Lobby"},
	Default = "None",
	Callback = function(Value)
		getgenv().ActionSpecificChallenge = Value 
	end,
}, "ActionSpecificChallenge")

--[[sections.MainSection18:Toggle({
	Name = "TP Lobby If Specific Rewards",
	Default = false,
	Callback = function(value)
		getgenv().AutoLobbySpecificRewards = value  

		while task.wait(.5) do 
			if AutoLobbySpecificRewards == true then 

	
	local mode = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text

				  if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") and mode ~= "Challenge"  then

					local itemsFolders = game:GetService("ReplicatedStorage").Gameplay.Game.Challenge.Items
local found = {}
for _, items in pairs(itemsFolders:GetChildren()) do
    found[items.Name] = true
end

for _, wantedName in pairs(getgenv().WantedItemsForChallenge) do
    if found[wantedName] and game:GetService("Players").LocalPlayer.PlayerGui.AFKChamber.Enabled == false  then
		local gameId = "72829404259339"
		local TeleportService = game:GetService("TeleportService")
		local player = game.Players.LocalPlayer 
		TeleportService:Teleport(tonumber(gameId), player)
		break
    end
end

end 
			else
				wait()
				break
			end 
		end 
	end,
}, "AutoLobbySpecificRewardsToggle")
]]

local specificchallenge = sections.MainSection18:Toggle({
	Name = "Auto Join Selected Rewards",
	Default = false,
	Callback = function(value)

		getgenv().AutoJoinChallengeSelected = value 

		while task.wait(0.5) do 
			if getgenv().AutoJoinChallengeSelected == true then 
		
				local itemsFolders = game:GetService("ReplicatedStorage").Gameplay.Game.Challenge.Items
				local found = {}
				for _, items in pairs(itemsFolders:GetChildren()) do
					found[items.Name] = true
				end
		
				local foundItem = false
		
				for _, wantedName in pairs(getgenv().WantedItemsForChallenge) do
					if found[wantedName] then
						foundItem = true
						
						local mode = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text 
						if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") and  mode == "Challenge" then return end 
						local playRoomEvent = game:GetService("ReplicatedStorage").Remote.Server.PlayRoom.Event
		
						playRoomEvent:FireServer("Create")
						task.wait(0.5)
						local args = {
							[1] = "Create",
							[2] = {
								["CreateChallengeRoom"] = true
							}
						}
						playRoomEvent:FireServer(unpack(args))
						task.wait(0.5)
						playRoomEvent:FireServer("Start")
						break
					end
				end
		
				-- only run fallback logic if no item matched
				if not foundItem then
					warn("[AutoSpecificChallenge] Rewards not found, start play auto join x.")
					task.wait(1)
		
					WorldSelectForAutoComplete:UpdateSelection(WaitChallenge)
					join:UpdateState(true)
				end
		
			else
				break
			end 
		end
		
	end,
}, "AutoJoinChallengeSelectedToggle")



local Players = game:GetService("Players")
local player = Players.LocalPlayer
local units = {"None"}

-- Check if UnitsFolder exists
local unitsFolder = player:FindFirstChild("UnitsFolder")

if unitsFolder then
    for _, v in ipairs(unitsFolder:GetChildren()) do
        if v:IsA("Folder") then
            table.insert(units, v.Name)
        end
    end
else
    local guiUnits = player:FindFirstChild("PlayerGui")
        :FindFirstChild("Profile")
        :FindFirstChild("Container")
        :FindFirstChild("Units")
        :FindFirstChild("Frame")

    if guiUnits then
        for _, v in ipairs(guiUnits:GetChildren()) do
            if v:IsA("TextButton") and v.Name ~= "None" then
                table.insert(units, v.Name)
            end
        end
    end
end




getgenv().Unit1ForPlace = "None"
getgenv().Unit2ForPlace = "None"
getgenv().Unit3ForPlace = "None"
getgenv().Unit4ForPlace = "None"
getgenv().Unit5ForPlace = "None"
getgenv().Unit6ForPlace = "None"


sections.MainSection14:Header({
	Name = "Specific Place:"
})

local Place1 = sections.MainSection14:Dropdown({
	Name = "Select Unit [1st]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit1ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit1ForPlace")
local Place2 = sections.MainSection14:Dropdown({
	Name = "Select Unit [2nd]:",
	Multi = false,
	Required = false,
	Options = units,
	Default = "None",
	Callback = function(Value)
		getgenv().Unit2ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit2ForPlace")
local Place3 = sections.MainSection14:Dropdown({
	Name = "Select Unit [3rd]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit3ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit3ForPlace")
local Place4 = sections.MainSection14:Dropdown({
	Name = "Select Unit [4th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit4ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit4ForPlace")
local Place5 = sections.MainSection14:Dropdown({
	Name = "Select Unit [5th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit5ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit5ForPlace")

local Place6 = sections.MainSection14:Dropdown({
	Name = "Select Unit [6th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit6ForPlace = Value 
		


	end,
}, "UpgradeSmartUnit6ForPlace")



getgenv().TimeDelay = 1



sections.MainSection14:Input({
	Name = "Delay To Place(s):",
	Placeholder = "seconds",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set delay to " .. input
		})
	end,
	onChanged = function(input)
		local cleanInput = input:gsub("[^%d%.]", "") -- removes all characters except digits and the decimal point
	getgenv().TimeDelay = tonumber(cleanInput)
	end,
}, "TimeDelayInput")

sections.MainSection14:Toggle({
	Name = "Auto Place Specific Units",
	Default = false,
	Callback = function(value)
		 getgenv().AutoPlaceSpecific = value
		 local firstTime = true

		  while task.wait(firstTime and getgenv().TimeDelay or 0.5) do 
			 if  getgenv().AutoPlaceSpecific == true then 
            
				local units = {
					getgenv().Unit1ForPlace or "None",
					getgenv().Unit2ForPlace or "None",
					getgenv().Unit3ForPlace or "None",
					getgenv().Unit4ForPlace or "None",
					getgenv().Unit5ForPlace or "None",
					getgenv().Unit6ForPlace or "None"
				}
				
				for i, v in ipairs(units) do
					if v ~= "None" then
						local args = {
							[1] = game:GetService("Players").LocalPlayer.UnitsFolder:WaitForChild(v)
						}
						game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Units"):WaitForChild("Deployment"):FireServer(unpack(args))
						--print(v .. " was chosen to place")
					end
				end
				
			 else
				wait() 
				break 
			 end 
			end 
	end,
}, "AutoPlaceSpecificToggle")



sections.MainSection14:Paragraph({
	Header = "Note:",
	Body = "If you see ur units not spawn, that mean it reached the limit of that units.  \n\nIf you dont set time delay for Place & Upgrade, the default time delay is 1"
})


sections.MainSection8:Header({
	Name = "Specific Upgrades:"
})



getgenv().Unit1 = "None"
getgenv().Unit2 = "None"
getgenv().Unit3 = "None"
getgenv().Unit4 = "None"
getgenv().Unit5 = "None"
getgenv().Unit6 = "None"



local Upgrade1 = sections.MainSection8:Dropdown({
	Name = "Select Unit [1st]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit1 = Value 
		


	end,
}, "UpgradeSmartUnit1")
local Upgrade2 = sections.MainSection8:Dropdown({
	Name = "Select Unit [2nd]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit2 = Value 
		


	end,
}, "UpgradeSmartUnit2")
local Upgrade3 = sections.MainSection8:Dropdown({
	Name = "Select Unit [3rd]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit3 = Value 
		


	end,
}, "UpgradeSmartUnit3")
local Upgrade4 = sections.MainSection8:Dropdown({
	Name = "Select Unit [4th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit4 = Value 
		


	end,
}, "UpgradeSmartUnit4")
local Upgrade5 = sections.MainSection8:Dropdown({
	Name = "Select Unit [5th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit5 = Value 
		


	end,
}, "UpgradeSmartUnit5")

local Upgrade6 = sections.MainSection8:Dropdown({
	Name = "Select Unit [6th]:",
	Multi = false,
	Required = false,
	Options = units,
	Default =  "None",
	Callback = function(Value)
		getgenv().Unit6 = Value 
		


	end,
}, "UpgradeSmartUnit6")


sections.MainSection8:Input({
	Name = "Number To Upgrade [1st]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade1 = input
	end,
}, "MaxUpgrade1")

sections.MainSection8:Input({
	Name = "Number To Upgrade [2nd]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade2 = input
	end,
}, "MaxUpgrade2")

sections.MainSection8:Input({
	Name = "Number To Upgrade [3rd]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade3 = input
	end,
}, "MaxUpgrade3")

sections.MainSection8:Input({
	Name = "Number To Upgrade [4th]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade4 = input
	end,
}, "MaxUpgrade4")

sections.MainSection8:Input({
	Name = "Number To Upgrade [5th]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade5 = input
	end,
}, "MaxUpgrade5")

sections.MainSection8:Input({
	Name = "Number To Upgrade [6th]:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set input to " .. input
		})
	end,
	onChanged = function(input)
		getgenv().SmartUpgrade6 = input
	end,
}, "MaxUpgrade6")




getgenv().TimeDelayUpgrade = 1 

sections.MainSection10:Input({
	Name = "Delay To Upgrade(s):",
	Placeholder = "seconds",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set delay to " .. input
		})
	end,
	onChanged = function(input)
		local cleanInput = input:gsub("[^%d%.]", "") -- removes all characters except digits and the decimal point
		getgenv().TimeDelayUpgrade = tonumber(cleanInput)
	end,
}, "TimeDelayInputUpgrade")

sections.MainSection10:Toggle({
	Name = "Auto Upgrade Selected Units",
	Default = false,
	Callback = function(value)
		getgenv().AutoSmartUpgrade = value
		local runningUpgrade = false

		function StartSmartUpgrade()
			if runningUpgrade then return end
			runningUpgrade = true
		
			task.spawn(function()
				while getgenv().AutoSmartUpgrade do
					local units = {
						getgenv().Unit1 or "None",
						getgenv().Unit2 or "None",
						getgenv().Unit3 or "None",
						getgenv().Unit4 or "None",
						getgenv().Unit5 or "None",
						getgenv().Unit6 or "None"
					}
		
					local smartUpgrades = {
						tonumber(getgenv().SmartUpgrade1),
						tonumber(getgenv().SmartUpgrade2),
						tonumber(getgenv().SmartUpgrade3),
						tonumber(getgenv().SmartUpgrade4),
						tonumber(getgenv().SmartUpgrade5),
						tonumber(getgenv().SmartUpgrade6)
					}
		
					local player = game:GetService("Players").LocalPlayer
					local unitFrame = player.PlayerGui.HUD.InGame.UnitsManager.Main.Main.ScrollingFrame
					local upgradeRemote = game:GetService("ReplicatedStorage").Remote.Server.Units.Upgrade
		
					for i = 1, #units do
						if not getgenv().AutoSmartUpgrade then break end
		
						local unitName = units[i]
						local targetUpgrade = smartUpgrades[i]
		
						if unitName ~= "None" and targetUpgrade then
							local unitGui = unitFrame:FindFirstChild(unitName)
							local upgradeTextObj = unitGui and unitGui:FindFirstChild("UpgradeText")
		
							if unitGui and upgradeTextObj then
								local currentUpgrade = 0
								for number in upgradeTextObj.Text:gmatch("%d+") do
									currentUpgrade = tonumber(number)
								end
		
								if currentUpgrade < targetUpgrade then
									local unitInstance = player:WaitForChild("UnitsFolder"):FindFirstChild(unitName)
									if unitInstance then
										upgradeRemote:FireServer(unitInstance)
		
										-- Wait for the GUI to update and reflect the upgrade
										for attempt = 1, 10 do -- 10 attempts = up to 2 seconds
											task.wait(0.2)
											local updatedGui = unitFrame:FindFirstChild(unitName)
											local updatedTextObj = updatedGui and updatedGui:FindFirstChild("UpgradeText")
		
											if updatedTextObj then
												local updatedLevel = 0
												for num in updatedTextObj.Text:gmatch("%d+") do
													updatedLevel = tonumber(num)
												end
		
												if updatedLevel > currentUpgrade then
													break -- upgrade confirmed
												end
											end
										end
		
										break -- stop after upgrading one unit (priority respected)
									end
								end
							end
						end
					end
		
					task.wait(getgenv().TimeDelayUpgrade or 1)
				end
		
				runningUpgrade = false
			end)
		end
		StartSmartUpgrade()
	end,
}, "AutoSmartUpgradeToggle")


local randomupgrade = sections.MainSection10:Toggle({
	Name = "Auto Random Upgrade",
	Default = false,
	Callback = function(value)
		getgenv().AutoRandomUpgrade = value
        while task.wait(.5) do 
			 if AutoRandomUpgrade == true then 

   for i,v in pairs(game:GetService("Players").LocalPlayer.UnitsFolder:GetChildren()) do 
	local args = {
		[1] = game:GetService("Players").LocalPlayer.UnitsFolder[v.Name]
	}
	
	game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Units"):WaitForChild("Upgrade"):FireServer(unpack(args))
	
   end 
			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoRandomUpgradeToggle")


sections.MainSection11:Header({
	Text = "All Rangers Auto Join:"
})



local AutoCompleteForChoose = sections.MainSection11:Dropdown({
	Name = "Auto Join X After Done All:",
	Multi = false,
	Required = true,
	Options = {"Story","Raid","Challenge","Infinity Castle","Boss-Event","Easter-Event","AFK Chamber"},
	Default = "",
	Callback = function(Value)
		getgenv().WaitRangers = Value 
	end,
}, "AutoCompleteForChooseSelect")

local Players = game:GetService("Players")
				local GuiService = game:GetService("GuiService")
				local vim = game:GetService("VirtualInputManager")
	
				local Player = Players.LocalPlayer
				local Gui = Player.PlayerGui
				local inset1, inset2 = GuiService:GetGuiInset()
				local insetOffset = inset1 - inset2
	
				local function click(part, offsetX, offsetY)
					if not part or not part:IsA("GuiObject") then return end
					local topLeft = part.AbsolutePosition + insetOffset
					local center = topLeft + (part.AbsoluteSize / 2)
					local X = center.X + (offsetX or 0)
					local Y = center.Y + (offsetY or 0)
	
					vim:SendMouseButtonEvent(X, Y, 0, true, game, 0)
					task.wait()
					vim:SendMouseButtonEvent(X, Y, 0, false, game, 0)
				end


local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
local replicatedStorage = game:GetService("ReplicatedStorage")
local playRoomEvent = replicatedStorage:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event")

local completeall = sections.MainSection11:Toggle({
	Name = "Auto Complete All Rangers Stage",
	Default = false,
	Callback = function(value)
		getgenv().AutoCompleteRangersStage = value

		-- Return if UnitsFolder exists
		if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") then return end
		
		-- Disable auto join while running this
		if join.State == true then 
			join:UpdateState(false) 
		end
		
		-- Helper function for safe remote calls
		local function firePlayRoomEvent(action, data)
			pcall(function()
				game:GetService("ReplicatedStorage")
					:WaitForChild("Remote")
					:WaitForChild("Server")
					:WaitForChild("PlayRoom")
					:WaitForChild("Event")
					:FireServer(action, data)
			end)
			task.wait(0.5)
		end
		
		while task.wait(0.5) do
			if not AutoCompleteRangersStage then break end
		
			local player = game:GetService("Players").LocalPlayer
			player.PlayerGui.PlayRoom.Enabled = true 
			task.wait(0.9)
		
			-- Create room
			firePlayRoomEvent("Create")
		
			-- Set mode
			firePlayRoomEvent("Change-Mode", { Mode = "Ranger Stage" })
		
			-- 🔁 Refresh chapter visibility by switching worlds
			local initialWorlds = { "OnePiece", "Namek", "DemonSlayer", "Naruto", "OPM" }
			for _, world in ipairs(initialWorlds) do
				firePlayRoomEvent("Change-World", { World = world })
			end
		
			-- 🔒 Check if all RangerStageLock are locked
			local allLocked = true
			local chapterDescendants = player.PlayerGui.PlayRoom.Main.GameStage.Main.Base.Chapter:GetDescendants()
			for _, v in pairs(chapterDescendants) do
				if v:IsA("Frame") and v.Name == "RangerStageLock" and v.Visible == false then
					allLocked = false
					break
				end
			end
		
			if allLocked then
				getgenv().AutoCompleteRangersStage = false
				warn("[AutoCompleteRangersStage] All stages are locked, stopping automation.")
				task.wait(1)
		
				firePlayRoomEvent("Remove")
				click(player.PlayerGui.PlayRoom.Main.Button.Leave)
				task.wait(1)
		
				WorldSelectForAutoComplete:UpdateSelection(WaitRangers)
				join:UpdateState(true)
				break
			end
		
			-- 🎯 Try to enter the first unlocked chapter based on priority
			local priorityOrder = { "OnePiece", "Namek", "DemonSlayer", "Naruto", "OPM" }
			local stageOrder = { "RangerStage1", "RangerStage2", "RangerStage3" }
			local stageFound = false
		
			for _, worldName in ipairs(priorityOrder) do
				for _, stageName in ipairs(stageOrder) do
					local chapters = player.PlayerGui.PlayRoom.Main.GameStage.Main.Base.Chapter:GetDescendants()
		
					for _, v in pairs(chapters) do
						if v:IsA("Frame") and v.Name == "RangerStageLock" and v.Visible == false then
							local chapterFrame = v.Parent
							local worldFrame = chapterFrame.Parent
		
							local fullName = tostring(worldFrame.Name)
							local world, stage = string.match(fullName, "([^_]+)_([^_]+)")
		
							if world == worldName and stage == stageName then
								print("[AutoCompleteRangersStage] Selected:", world, stage)
		
								firePlayRoomEvent("Change-World", { World = world })
								firePlayRoomEvent("Change-Chapter", { Chapter = fullName })
								firePlayRoomEvent("Submit")
								firePlayRoomEvent("Start")
		
								stageFound = true
								break
							end
						end
					end
					if stageFound then break end
				end
				if stageFound then break end
			end
		end
		
	end,
}, "AutoCompleteAllRangersStage")

sections.MainSection11:Toggle({
	Name = "TP Lobby If Ranger Unlocked",
	Default = false,
	Callback = function(value)
		getgenv().AutoLobby = value  
		while task.wait(.5) do 
			if AutoLobby == true then 

				local folder = game:GetService("ReplicatedStorage").Player_Data[game.Players.LocalPlayer.Name].RangerStage
	local mode = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text

				  if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") and mode ~= "Ranger Stage"  then
if #folder:GetChildren() == 0 then
	local gameId = "72829404259339"
	local TeleportService = game:GetService("TeleportService")
	local player = game.Players.LocalPlayer 
	TeleportService:Teleport(tonumber(gameId), player)
   break 
end
end 

			else
				wait()
				break
			end 
		end 
	end,
}, "AutoLobbyToggle")

sections.MainSection11:Button({
	Name = "Reset Selected",
	Callback = function()
		AutoCompleteForChoose:UpdateSelection("None")


					Window:Notify({
						Title = Window.Settings.Title,
						Description = "Successfully Reset Selected!"
					})

	end,
})

sections.MainSection16:Header({
	Text = "Specific Multiple Rangers Auto Join:"
})

local AutoCompleteForChooseSpecfic = sections.MainSection16:Dropdown({
	Name = "Auto Join X After Done All:",
	Multi = false,
	Required = true,
	Options = {"Story","Raid","Challenge","Infinity Castle","Boss-Event","Easter-Event","AFK Chamber"},
	Default = "",
	Callback = function(Value)
		getgenv().WaitRangersSpecific = Value 
	end,
}, "AutoCompleteForChooseSelectSpecific")

local multispecficDP = sections.MainSection16:Dropdown({
	Name = "Select Multi Specific Rangers:",
	Search = true,
	Multi = true,
	Required = false,
	Options = {"OnePiece_RangerStage1","OnePiece_RangerStage2","OnePiece_RangerStage3","Namek_RangerStage1","Namek_RangerStage2","Namek_RangerStage3","DemonSlayer_RangerStage1","DemonSlayer_RangerStage2","DemonSlayer_RangerStage3","Naruto_RangerStage1","Naruto_RangerStage2","Naruto_RangerStage3","OPM_RangerStage1","OPM_RangerStage2","OPM_RangerStage3"},
	Default = {"None"},
	Callback = function(Value)
		getgenv().WantedRangers = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedRangers, i)  -- Insert the key (i) into the table
		end
		print("Wanted Multi Rangers changed:", table.concat(getgenv().WantedRangers, ","))
		
	end,
}, "MultiSpecificRangerDP")

local ActionSpecificDP = sections.MainSection16:Dropdown({
	Name = "Select Action After: ",
	Multi = false,
	Required = true,
	Options = {"Retry","Next Stage","Return To Lobby"},
	Default = "None",
	Callback = function(Value)
		getgenv().ActionSpecific = Value 
	end,
}, "ActionSpecific")


local playergui =  game:GetService("Players").LocalPlayer.PlayerGui.PlayRoom.Main.GameStage.Main.Base.Chapter

local completespecific = sections.MainSection16:Toggle({
	Name = "Auto Complete Specific Rangers",
	Default = false,
	Callback = function(value)
		getgenv().AutoSpecificRangers = value

if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") then return end

if join.State == true then 
    join:UpdateState(false) 
end

-- Helper for firing PlayRoom events
local function firePlayRoomEvent(action, data)
    pcall(function()
        game:GetService("ReplicatedStorage")
            :WaitForChild("Remote")
            :WaitForChild("Server")
            :WaitForChild("PlayRoom")
            :WaitForChild("Event")
            :FireServer(action, data)
    end)
    task.wait(0.5)
end

while task.wait(0.5) do
    if not AutoSpecificRangers then break end

    local player = game:GetService("Players").LocalPlayer
    local playergui = player.PlayerGui.PlayRoom.Main.GameStage.Main.Base.Chapter
    player.PlayerGui.PlayRoom.Enabled = true 
    task.wait(0.6)

    firePlayRoomEvent("Create")
    firePlayRoomEvent("Change-Mode", { Mode = "Ranger Stage" })

    -- 🔁 Refresh chapter visibility
    local refreshWorlds = { "OnePiece", "Namek", "DemonSlayer", "Naruto", "OPM" }
    for _, world in ipairs(refreshWorlds) do
        firePlayRoomEvent("Change-World", { World = world })
    end

    -- 🔒 Check if all selected stages are locked
    local allLocked = true
    for _, v in pairs(WantedRangers) do
        local world, _ = string.match(v, "([^_]+)_([^_]+)")
        if playergui[world][v].Inner:FindFirstChild("RangerStageLock") and playergui[world][v].Inner.RangerStageLock.Visible == false then
            allLocked = false
            break
        end
    end

    if allLocked then
        getgenv().AutoSpecificRangers = false
        warn("[AutoSpecificRangers] All stages are locked, stopping automation.")
        task.wait(1)

        firePlayRoomEvent("Remove")
        click(player.PlayerGui.PlayRoom.Main.Button.Leave)
        task.wait(1)

        WorldSelectForAutoComplete:UpdateSelection(WaitRangersSpecific)
        join:UpdateState(true)
        break
    end

    -- 🎯 Enter the first unlocked chapter in WantedRangers
    local playRoomEvent = game:GetService("ReplicatedStorage")
        :WaitForChild("Remote")
        :WaitForChild("Server")
        :WaitForChild("PlayRoom")
        :WaitForChild("Event")

    for _, v in pairs(WantedRangers) do
        local world, _ = string.match(v, "([^_]+)_([^_]+)")
        if playergui[world][v].Inner:FindFirstChild("RangerStageLock") and playergui[world][v].Inner.RangerStageLock.Visible == false then
            print("Selected:", world, v)

            firePlayRoomEvent("Change-World", { World = world })
            firePlayRoomEvent("Change-Chapter", { Chapter = v })
            firePlayRoomEvent("Submit")
            firePlayRoomEvent("Start")
            break
        end
    end
end

	end,
}, "AutoSpecificRangersToggle")

sections.MainSection16:Toggle({
	Name = "TP Lobby If Specific Unlocked",
	Default = false,
	Callback = function(value)
		getgenv().AutoLobbySpecific = value  
		while task.wait(.5) do 
			if AutoLobbySpecific == true then 

	
	local mode = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text

				  if game:GetService("Players").LocalPlayer:FindFirstChild("UnitsFolder") and mode ~= "Ranger Stage"  then

local rangerFolder = game:GetService("ReplicatedStorage").Player_Data[game.Players.LocalPlayer.Name].RangerStage
local found = {}

-- Mark which rangers exist
for _, ranger in pairs(rangerFolder:GetChildren()) do
    found[ranger.Name] = true
end

-- Check if any wanted ranger is missing
for _, wantedName in pairs(getgenv().WantedRangers) do
    if not found[wantedName] then
		local gameId = "72829404259339"
		local TeleportService = game:GetService("TeleportService")
		local player = game.Players.LocalPlayer 
		TeleportService:Teleport(tonumber(gameId), player)
		break
    end
end

end 
			else
				wait()
				break
			end 
		end 
	end,
}, "AutoLobbySpecificToggle")


sections.MainSection16:Button({
	Name = "Reset Selected",
	Callback = function()
		multispecficDP:UpdateSelection("None")
		AutoCompleteForChooseSpecfic:UpdateSelection("None")


					Window:Notify({
						Title = Window.Settings.Title,
						Description = "Successfully Reset Selected!"
					})

	end,
})

sections.MainSection16:Paragraph({
	Header = "Note:",
	Body = "Select Action After For Specific Rangers is FOR RANGERS ONLY."
})


sections.MainSection11:Paragraph({
	Header = "How to use Auto Complete:",
	Body = "Auto-Complete auto set next stage, other modes auto set retry. \n\nIf you completed all Rangers, it's auto do the thing u selected while waiting rangers unlocked all. \n\n MAKE SURE TO SELECT CONFIG"
})

sections.MainSection12:Header({
	Name = "Webhook:"
})
local MultiDropdown = sections.MainSection12:Dropdown({
	Name = "Select Units/Items To Notify:",
	Search = true,
	Multi = true,
	Required = false,
	Options = {"Everything","Onigiri","Sunrise Earrings","Blood Ember","Cursed Core","Dark Essence","Demon Fang Shard","Moonroot Herb","Flame Seal Tag","Mirror Lens","Soul Core","Slayer Stone Fragment","Stats Key","Perfect Stats Key","Cursed Finger","Dr. Megga Punk","Trait Reroll","Ranger Crystal","Luck Potion","Green Bean","Narmekian Ore","Power Core","Dracoscale Shard","Arcane Dust","Narmekian Crystal","Nano Fiber Wire","Micro Circuit Board"
,"Phantom Alloy","Enhanced Optical Lens","Energy Vial","Ramen","Storm Flake Crystal","Shadow Fiber","Seal of Gale","Chakra Shard","Ancient Talisman","Smoke Orb","Scroll of Focus","Kunai Shards","Core of Silence","French Fries","Alpha Dust","Blast Cell","Chaos Bone Shard","Surge Nucleus","Mutant Core Fragment","Genesis Matrix","Neurochip Beta","Tactical Frame","SYN-Core","Rubber Fruit","Sea Gem Fragment","Soul Shard","Mystic Kelp","Will Core","Void Pearl"
,"Obsidian Plate","Marine Tech Chip","Combat Fluid","Ghost Lens","Ancient Power Core","Bunny Bounce Boots","Carrot Cutter","Fluffy Focus","Furrocious Fluff"},
	Default = {'None'},
	Callback = function(Value)
		getgenv().WantedNotify = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedNotify, i)  -- Insert the key (i) into the table
		end
		print("ItemWebhookNotify changed:", table.concat(getgenv().WantedNotify, ","))
		
	end,
}, "UnitorItemsDP")

sections.MainSection12:Input({
	Name = "Enter Url:",
	Placeholder = "",
	AcceptedCharacters = "All",
	Callback = function(input)
		Window:Notify({
			Title = Window.Settings.Title,
			Description = "Successfully set url to " .. input
		})
	end,
	onChanged = function(input)
	 getgenv().Url = tostring(input)
	end,
}, "WebhookURL")

local autosend = sections.MainSection12:Toggle({
	Name = "Auto Send After Win/Lose",
	Default = false,
	Callback = function(value)
		getgenv().AutoSendWebhook = value
		getgenv().Url = getgenv().Url -- Replace this with your webhook
		
		local hasrun = false
		local player = game.Players.LocalPlayer
		local http = game:GetService("HttpService")
		
		function SendMessageEMBED(url, embed, pingEveryone)
			local headers = {
				["Content-Type"] = "application/json"
			}
		
			local data = {
				["content"] = pingEveryone and "@everyone" or nil, -- ✅ Only ping when needed
				["embeds"] = {
					{
						["title"] = embed.title,
						["description"] = embed.description,
						["color"] = embed.color or 0xffffff,
						["fields"] = embed.fields,
						["footer"] = {
							["text"] = embed.footer.text,
							["icon_url"] = embed.footer.icon_url
						},
						["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
					}
				}
			}
		
			local body = http:JSONEncode(data)
		
			local response = (syn and syn.request or request)({
				Url = url,
				Method = "POST",
				Headers = headers,
				Body = body
			})
		
			print("Sent " .. (pingEveryone and "with @everyone" or "without ping"))
		end
		
		-- Reset `hasrun` when RewardsUI is hidden again
		player.PlayerGui.RewardsUI:GetPropertyChangedSignal("Enabled"):Connect(function()
			if not player.PlayerGui.RewardsUI.Enabled then
				hasrun = false
			end
		end)
		
		-- Loop to check win condition
		while task.wait(0.5) do
			if getgenv().AutoSendWebhook == true then
				local gui = player.PlayerGui.RewardsUI
				if gui.Enabled and not hasrun then
					hasrun = true
		
					local playerName = "[" .. game:GetService("ReplicatedStorage").Player_Data[player.Name].Data.Level.Value .. "] ||" .. player.Name .. "||"
					local winorlose = gui.Main.LeftSide.GameStatus.Text
					local world = gui.Main.LeftSide.World.Text
					local mode = gui.Main.LeftSide.Mode.Text
					local chap = gui.Main.LeftSide.Chapter.Text
					local diff = gui.Main.LeftSide.Difficulty.Text
					local time = gui.Main.LeftSide.TotalTime.Text
		
					local rewards = {}
					for _, v in pairs(player.RewardsShow:GetChildren()) do
						if v:IsA('Folder') and (v.Name ~= "Exp" and v.Name ~= "Gold" and v.Name ~= "Gem" and v.Name ~= "Egg") and v:FindFirstChild("Amount") then
							table.insert(rewards, "\n" .. v.Name .. "(+" .. v.Amount.Value .. ")" .. " | Total: " .. game:GetService("ReplicatedStorage").Player_Data[player.Name].Items[v.Name].Amount.Value)
						end
					end
		
					if next(rewards) == nil then
						local currentTime = os.date("*t") -- gets local time
local hour = currentTime.hour
local minute = currentTime.min
local second = currentTime.sec


						print("No rewards found, skipping webhook. \nTime Finished: " .. "Hours: " .. string.format("%02d", hour) .. " | Minutes: " .. string.format("%02d", minute) .. " | Seconds: " .. string.format("%02d", second))
						Window:Notify({
							Title = "Webhook Notify",
							Description = "No rewards so not send webhook! \nTime Finished: " .. "Hours: " .. string.format("%02d", hour) .. " | Minutes: " .. string.format("%02d", minute) .. " | Seconds: " .. string.format("%02d", second),
							Lifetime = 50
						})
						continue
					end
		
					getgenv().Number = (winorlose == "~ WON" and 65280 or 16711680)
		
					for _, wantedItem in pairs(getgenv().WantedNotify) do
						local matched = false
						for _, rewardItem in pairs(player.RewardsShow:GetChildren()) do
							if wantedItem == tostring(rewardItem) then
								matched = true
							end
						end
		
						if matched or wantedItem == "Everything" then
							local embed = {
								title = "Anime Rangers X",
								description = nil,
								color = tonumber(getgenv().Number),
								fields = {
									{ name = "- Name", value = playerName, inline = false },
									{ name = "- Result", value = world .. winorlose .. "\n" .. chap .. " - ( " .. diff .. " )\n" .. time .. "\n - Rewards:" .. table.concat(rewards, ""), inline = false }
								},
								footer = {
									text = "L-Hub",
									icon_url = "" -- Optional: add icon if needed
								}
							}
		
							local shouldPing = (matched and wantedItem ~= "Everything")
SendMessageEMBED(getgenv().Url, embed, shouldPing)

						end
					end
				end
			else
				wait()
				break
			end
		end
		
	end,
}, "AutoSendWebhook")


sections.MainSection12:Paragraph({
	Header = "About Rewards:",
	Body = "Webhook will ignore Gems, EXP, Gold, Egg — All other rewards will be notified. \n\n Webhook auto ping @everyone if you select specific units/items \n\n You can select multiples specific items/units. \n\n If there are no rewards, webhook will send notify in ur game instead of discord."
})

local didControlPress = false


sections.MainSection3:Toggle({
	Name = "Auto Do Selected Action",
	Default = false,
	Callback = function(value)
		getgenv().AutoAfterWinLose = value

		
        while task.wait(.2) do 
			 if AutoAfterWinLose == true then 
				if not getgenv().AutoAfterWinLose then break end
				local mode = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text

				if completeall.State then
					if mode == "Ranger Stage" then
						methodaction:UpdateSelection("Next Stage")
					elseif mode == "Challenge" or mode == "Story" or mode == "Boss-Event" or mode == "Event" then
						methodaction:UpdateSelection("Retry")
					end
				
				elseif completespecific.State then
					if mode == "Ranger Stage" then
						methodaction:UpdateSelection(ActionSpecific)
					elseif mode == "Challenge" or mode == "Story" or mode == "Boss-Event" or mode == "Event" then
						methodaction:UpdateSelection("Retry")
					end
				
				elseif specificchallenge.State then
			 if mode == "Challenge" or mode == "Story" or mode == "Boss-Event" or mode == "Event" then
						methodaction:UpdateSelection(ActionSpecificChallenge)
					end
				end
				
				
                if getgenv().Method == "Retry" then 
					
if game:GetService("Players").LocalPlayer.PlayerGui.Visual:FindFirstChild("Showcase_Units")  and game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == false then 
	game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, true, game, 1)
				game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, false, game, 1)
elseif  game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == true then
	if autosend.State == false then 
game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VoteRetry"):FireServer()
	elseif autosend.State == true then 
task.wait(1.2)
print('passed 1s start retry')
game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VoteRetry"):FireServer()
print("sent webhook now retry")
	end
				end

                
                elseif getgenv().Method == "Next Stage" then 
					if game:GetService("Players").LocalPlayer.PlayerGui.Visual:FindFirstChild("Showcase_Units") and game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == false then 
						game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, true, game, 1)
									game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, false, game, 1)
					elseif  game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == true then

						if autosend.State == false then 
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VoteNext"):FireServer()
						elseif autosend.State == true then 
							
 task.wait(1.2)
 print('passed 1s start next')
 game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VoteNext"):FireServer()
 print("sent webhook now next")
					end 
									end
					
                elseif getgenv().Method == "Return To Lobby" then 
					 
					if game:GetService("Players").LocalPlayer.PlayerGui.Visual:FindFirstChild("Showcase_Units") and game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == false then 
						game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, true, game, 1)
									game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, false, game, 1)
					elseif  game:GetService("Players").LocalPlayer.PlayerGui.RewardsUI.Enabled == true then
			 if autosend.State == false then 
				local gameId = "72829404259339"
				local TeleportService = game:GetService("TeleportService")
				local player = game.Players.LocalPlayer 
				TeleportService:Teleport(tonumber(gameId), player)
               break 
					elseif autosend.State == true then 
 task.wait(1.2)
 local gameId = "72829404259339"
 local TeleportService = game:GetService("TeleportService")
 local player = game.Players.LocalPlayer 
 TeleportService:Teleport(tonumber(gameId), player)
 break
					end 

                    end
                end
                

			 else
				wait()
				break
			 end 
			end 
	end,
}, "AutoAfterWinLoseToggle")



local evo_items = {}
for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Crafting.Main.RightSide.InScrolling.ScrollingFrame:GetChildren()) do
    if v:IsA("Text Button") then
       table.insert(evo_items,v.Name)
    end
end


sections.MainSection19:Header({
	Name = "Auto-Craft:"
})

getgenv().WantedEvoItems = {}
local multiitemevo = sections.MainSection19:Dropdown({
	Name = "Select To Craft [Multi]:",
	Search = true,
	Multi = true,
	Required = false,
	Options = items,
	Default = {"None"},
	Callback = function(Value)
		getgenv().WantedEvoItems = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedEvoItems, i)  -- Insert the key (i) into the table
		end
		print("Wanted Multi Items Evo changed:", table.concat(getgenv().WantedEvoItems, ","))
		
	end,
}, "multiitemevoDP")


sections.MainSection19:Toggle({
	Name = "Auto Craft Selected Items",
	Default = false,
	Callback = function(value)
		getgenv().AutoCraft = value
		getgenv().DestroySystemMsg = value
		
		local player = game:GetService("Players").LocalPlayer
		local playerGui = player:WaitForChild("PlayerGui")
		
		-- 🔄 Store the connection
		local destroyMsgConnection = nil
		
		-- ⚙️ Dynamic handler
		local function UpdateDestroyListener()
			if getgenv().DestroySystemMsg then
				if not destroyMsgConnection or not destroyMsgConnection.Connected then
					destroyMsgConnection = playerGui.ChildAdded:Connect(function(child)
						if child.Name == "SystemMessage" then
							child:Destroy()
						end
					end)
				end
			else
				if destroyMsgConnection then
					destroyMsgConnection:Disconnect()
					destroyMsgConnection = nil
				end
			end
		end
		
		-- 👂 Monitor the toggle every half second
		task.spawn(function()
			while true do
				UpdateDestroyListener()
				task.wait(0.5)
			end
		end)
		
		-- 🔁 Auto-craft loop
		while task.wait(0.5) do 
			if getgenv().AutoCraft == true then 
				for i, v in pairs(getgenv().WantedEvoItems) do
					local args = {
						[1] = v,
						[2] = "1",
						[3] = "1"
					}
					
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Crafting"):WaitForChild("Event"):FireServer(unpack(args))
					task.wait(0.5)
		
					-- 🧼 Backup manual destroy
					local systemMsg = playerGui:FindFirstChild("SystemMessage")
					if systemMsg and getgenv().DestroySystemMsg then
						systemMsg:Destroy()
					end 
				end 
			else
				wait()
				break
			end 
		end
		
	end,
}, "AutoCraftToggle")

sections.MainSection19:Label({
	Text = "You can auto craft in match!"
})


sections.MainSection22:Header({
	Name = "Enable/Disable UI [In-Match]:"
})


local Dropdown = sections.MainSection22:Dropdown({
	Name = "Select UI",
	Multi = false,
	Required = false,
	Options = {"Crafting","EvolveTier","FeedEXP","Items","LimitBreaks","Merchant","ShinyNormalize","StatsPotential","Traits","UnitsEvolve","UnitsGacha","ApplyCurse","EasterEggEvent"},
	Default = 1,
	Callback = function(Value)
		getgenv().UI = Value 
	end,
}, "UIDP")


sections.MainSection22:Toggle({
	Name = "Enable/Disable Selected UI",
	Default = false,
	Callback = function(value)
		game:GetService("Players").LocalPlayer.PlayerGui[getgenv().UI].Enabled = value 
	end,
}, "EnableUI")



sections.MainSection20:Header({
	Name = "Auto Buy Items [Merchant]:"
})


local multiunitevo = sections.MainSection20:Dropdown({
	Name = "Select Multi Items:",
	Search = true,
	Multi = true,
	Required = false,
	Options = {"Onigiri","Sunrise Earrings","Blood Ember","Cursed Core","Dark Essence","Demon Fang Shard","Moonroot Herb","Flame Seal Tag","Mirror Lens","Soul Core","Slayer Stone Fragment","Stats Key","Perfect Stats Key","Cursed Finger","Dr. Megga Punk","Trait Reroll","Ranger Crystal","Luck Potion","Green Bean","Narmekian Ore","Power Core","Dracoscale Shard","Arcane Dust","Narmekian Crystal","Nano Fiber Wire","Micro Circuit Board"
,"Phantom Alloy","Enhanced Optical Lens","Energy Vial","Ramen","Storm Flake Crystal","Shadow Fiber","Seal of Gale","Chakra Shard","Ancient Talisman","Smoke Orb","Scroll of Focus","Kunai Shards","Core of Silence","French Fries","Alpha Dust","Blast Cell","Chaos Bone Shard","Surge Nucleus","Mutant Core Fragment","Genesis Matrix","Neurochip Beta","Tactical Frame","SYN-Core","Rubber Fruit","Sea Gem Fragment","Soul Shard","Mystic Kelp","Will Core","Void Pearl"
,"Obsidian Plate","Marine Tech Chip","Combat Fluid","Ghost Lens","Ancient Power Core"},
	Default = {"None"},
	Callback = function(Value)
		getgenv().WantedUnitForEvo = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedUnitForEvo, i)  -- Insert the key (i) into the table
		end
		print("Wanted Multi Items For Merchant changed:", table.concat(getgenv().WantedUnitForEvo, ","))
		
	end,
}, "multiunitevoDP")


sections.MainSection20:Toggle({
	Name = "Auto Buy Selected Items",
	Default = false,
	Callback = function(value)
		getgenv().AutoEvo = value
	 while task.wait(.5) do 
		 if AutoEvo == true then 

			local unitsFolder = game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Main.Base.Main.ScrollingFrame
			local found = {}
			
			for _, unit in pairs(unitsFolder:GetChildren()) do
				found[unit.Name] = unit
			end
			
			for _, wantedName in pairs(WantedUnitForEvo) do
				local unit = found[wantedName]
				local args = {
					[1] = wantedName,
					[2] = 1
				}
				
				game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Gameplay"):WaitForChild("Merchant"):FireServer(unpack(args))
				end

			
			else
				wait()
				break
			end 
		end
		
	end,
}, "AutoEvoToggle")

sections.MainSection20:Label({
	Text = "You can auto buy items in match!"
})





sections.MainSection24:Header({
	Name = "Auto-Buy Items Easter Event:"
})


local player = game.Players.LocalPlayer
local dataFolder = game:GetService("ReplicatedStorage").Player_Data[player.Name].Data

local labels = {"Egg"}
local labelObjects = {}
local previousValues = {}

-- Create labels and connect updates
for _, valueName in pairs(labels) do
	local valueObj = dataFolder:FindFirstChild(valueName)
	if valueObj and valueObj:IsA("ValueBase") then
		-- Store the initial value
		previousValues[valueName] = valueObj.Value

		-- Create the label with the initial value
		local label = sections.MainSection24:Label({
			Text = valueName .. ": " .. tostring(valueObj.Value)
		})

		labelObjects[valueName] = label

		-- Listen for changes on Value
		valueObj:GetPropertyChangedSignal("Value"):Connect(function()
			local newValue = valueObj.Value
			local previous = previousValues[valueName]
		
			local newText = valueName .. ": " .. tostring(newValue)
		
			-- Only show difference for number values
			if typeof(newValue) == "number" and typeof(previous) == "number" then
				local difference = newValue - previous
				if difference ~= 0 then
					newText = newText .. " (+" .. tostring(difference) .. " last match)"
				end
			elseif typeof(newValue) == "string" and newValue ~= previous then
				newText = newText .. " (changed from: " .. tostring(previous) .. ")"
			end
		
			label:UpdateName(newText)
			previousValues[valueName] = newValue
		end)
		
	end
end

local easteritems = {}
 for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.EasterEggEvent.Main.Base.Main.ScrollingFrame:GetChildren()) do 
	 if v:IsA("Frame") then 
		table.insert(easteritems,v.Name)
	 end 
	end 

local multieasteritem = sections.MainSection24:Dropdown({
	Name = "Select Multi Items:",
	Search = true,
	Multi = true,
	Required = false,
	Options = easteritems,
	Default = {"None"},
	Callback = function(Value)
		getgenv().WantedItemsForEasterEvent = {}
		for i, v in pairs(Value) do
			table.insert(getgenv().WantedItemsForEasterEvent, i)  -- Insert the key (i) into the table
		end
		print("Wanted Multi Items Challenge changed:", table.concat(getgenv().WantedItemsForEasterEvent, ","))
		
	end,
}, "multieasteritemDP")

sections.MainSection24:Toggle({
	Name = "Auto Buy Multi Items",
	Default = false,
	Callback = function(value)
		 getgenv().AutoEasterBuy = value 
		  while task.wait(.5) do 
			 if AutoEasterBuy == true then 
				for i, v in pairs(WantedItemsForEasterEvent) do
					local args = {
						[1] = v,
						[2] = 1
					}
					
					game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Gameplay"):WaitForChild("EasterEgg"):FireServer(unpack(args))
					
				end 
			 else
				 wait() 
				 break 
			 end 
			end 
	end,
}, "AutoBuyEasterToggle")

sections.MainSection24:Toggle({
	Name = "Auto Open Capsule",
	Default = false,
	Callback = function(value)
		getgenv().AutoOpenEgg = value
	 while task.wait(.5) do 
		 if AutoOpenEgg == true then 

			local args = {
				[1] = game:GetService("ReplicatedStorage").Player_Data[game.Players.LocalPlayer.Name].Items["Egg Capsule"],
				[2] = {
					["SummonAmount"] = 1
				}
			}
			
			game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Lobby"):WaitForChild("ItemUse"):FireServer(unpack(args))
			
			else
				wait()
				break
			end 
		end
		
	end,
}, "AutoOpenEggToggle")
------------------------ misc

sections.MainSection13:Header({
	Name = "Misc:"
})


sections.MainSection13:Toggle({
	Name = "Auto Hide UI When Executed",
	Default = false,
	Callback = function(value)
		getgenv().HideGUI = value

		while wait(5) do
			if getgenv().HideGUI == true then
				Window:SetState(false)
				task.wait(0.1)
				break
			end
		end
		

	end,
}, "AutoHideUI")

local RunS = game:GetService("RunService")


sections.MainSection13:Toggle({
	Name = "Auto Save GPU [Less Lag]",
	Default = false,
	Callback = function(value)
		getgenv().AutoSaveGPU = value

		while wait(2) do
			if getgenv().AutoSaveGPU == true then
				RunS:Set3dRenderingEnabled(false)
				return
			else
				RunS:Set3dRenderingEnabled(true)
				break 
			end
		end
	
	end,
}, "AutoSaveGPUToggle")

sections.MainSection13:Toggle({
	Name = "Auto Hide Player Info [Visual]",
	Default = false,
	Callback = function(value)
		getgenv().HideName = value
		while wait(1) do
			if getgenv().HideName == true then
local textLabelNames = {
    "DatNguyenOnTop",
    "L-HUB comeback!",
    "NTR_Hentai.com",
	"kazoun owned you",
    "Pornhub.com",
    "furryloverhentai.com"
}

local function getRandomName()
    local randomIndex = math.random(1, #textLabelNames)
    return textLabelNames[randomIndex]
end


local randomName = getRandomName()
local playerpathcoregui = game.CoreGui.PlayerList.Children.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScollingFrame.OffsetUndoFrame
local playerpath2 =          game.Players.LocalPlayer.Character.Head.PlayerHeadGui
local function getRandomColor()
    return Color3.new(math.random(), math.random(), math.random())
end


      for i,v in pairs(playerpath2:GetDescendants()) do 
                    if v:IsA("TextLabel")   then 
                        v.TextColor3 = getRandomColor()
                    end 
                  end 
         
                  for i,v in pairs(playerpath2:GetDescendants()) do 
                    if v:IsA("TextLabel")   then 
                     v.Text = randomName
                    end 
                  end  
				else
				  break
				end
			end
			
	
		end,
	}, "AutoHideNameToggle")
		

sections.MainSection13:Toggle({
	Name = "TP Lobby If Glitched",
	Default = false,
	Callback = function(value)
		getgenv().HPCheckToggle = value

		coroutine.wrap(function()
			while task.wait(0.2) do 
				if not getgenv().HPCheckToggle then break end
		
				local hpLabel = workspace.Building.For_Use.Base.Red:WaitForChild("BaseHealthBar").HP.Values
		
				local function getCurrentHP()
					local text = hpLabel.Text
					return string.match(text, "^(%d+)")
				end
		
				if getCurrentHP() == "0" then
					print("HP is 0, starting 30s timer...")
		
					local startTime = tick()
					local shouldTP = true
		
					while tick() - startTime < 30 do
						if not getgenv().HPCheckToggle then
							print("Check manually disabled.")
							shouldTP = false
							break
						end
		
						if getCurrentHP() ~= "0" then
							print("HP changed, canceling timer.")
							shouldTP = false
							break
						end
		
						task.wait(1)
					end
		
					if shouldTP and getgenv().HPCheckToggle and getCurrentHP() == "0" then
						local gameId = "72829404259339"
						local TeleportService = game:GetService("TeleportService")
						local player = game.Players.LocalPlayer 
						TeleportService:Teleport(tonumber(gameId), player)
					end
				end
			end
		end)()
		
		
	end,
}, "AutoLobbyIfGlitchedToggle")

sections.MainSection13:Button({
	Name = "Remove Auto Load Config",
	Callback = function()
		if delfile then
			delfile("Maclib/settings/autoload.txt")
			Window:Notify({
				Title = "L-hub notify",
				Description = "Deleted AutoLoad Config, please rejoin.",
				Lifetime = 10
			})
		else
			print("delfile() is NOT supported.")
			Window:Notify({
				Title = "L-hub notify",
				Description = "Your executor not support delfile()...",
				Lifetime = 10
			})
		end
		
	end,
})



sections.MainSection13:Button({
	Name = "Open/Close UI",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/YOies/HideGUI/refs/heads/main/KazounProjects"))()
	end,
})



MacLib:SetFolder("Maclib")
tabs.Settings:InsertConfigSection("Left")

Window.onUnloaded(function()
	print("Unloaded!")
end)

if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Notification") then
	game:GetService("Players").LocalPlayer.PlayerGui.Notification:Destroy()
	end 

tabs.Main:Select()
MacLib:LoadAutoLoadConfig()

